// Problem 1: Sum square difference
// The sum of the squares of the first ten natural numbers is,
// 1 2  + 2 2  + ... + 10 2  = 385
// The square of the sum of the first ten natural numbers is,
// (1 + 2 + ... + 10) 2  = 55 2  = 3025

// Hence the difference between the sum of the squares of the first ten
// natural numbers and the square of the sum is 3025 − 385 = 2640.
// Find the difference between the sum of the squares of the first n natural
// numbers and the square of the sum.

// sumSquareDifference(10) should return a number.
// sumSquareDifference(10) should return 2640.
// sumSquareDifference(20) should return 41230.
// sumSquareDifference(100) should return 25164150.

//Solución:

// let numero = prompt("Ingrese un número: ", "");

// function sumSquareDifference(numero) {
//   let result_cuadrados = 0;
//   let result_suma = 0;

//   for (i = 0; i <= numero; i++) {
//     result_cuadrados += i * i;
//     result_suma += i;
//   }
//   result_suma *= result_suma;

//   return result_suma - result_cuadrados;
// }

// document.write(
//   "La diferencia del cuadrado de la suma y los cuadrados sumados es: " +
//     sumSquareDifference(numero)
// );

// Problem 2: Multiples of 3 and 5
// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below the provided parameter value number.
// multiplesOf3and5(10) should return a number.
// multiplesOf3and5(49) should return 543.
// multiplesOf3and5(1000) should return 233168.
// multiplesOf3and5(8456) should return 16687353.
// multiplesOf3and5(19564) should return 89301183.

//Solución:

// let numero = prompt("Ingrese un número: ","");
// let suma = 0;

// for(i=0; i<numero; i++){
//     if(i%3 === 0 || i%5 === 0 ){
//         suma += i;
//     }
// }
// document.write("La suma de todos los múltiplos de 3 o 5 de " + numero + " es: " + suma);

// Problem 3: Even Fibonacci Numbers

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.

// fiboEvenSum(10) should return a number.
// Your function should return an even value.
// Your function should sum the even-valued Fibonacci
// numbers: fiboEvenSum(8) should return 10.
// fiboEvenSum(10) should return 10.
// fiboEvenSum(34) should return 44.
// fiboEvenSum(60) should return 44.
// fiboEvenSum(1000) should return 798.
// fiboEvenSum(100000) should return 60696.
// fiboEvenSum(4000000) should return 4613732.

//Solución:

// let num = prompt("Ingrese un número: ", "");

// function esPar(num) {
//   return num % 2 === 0 ? num : 0;
// }

// function fiboEvenSum(num) {
//   let resultado = 0;
//   let fibo1 = 0;
//   let fibo2 = 1;

//   for (i = 0; i < num; i++) {
//     if (fibo2 <= num){
//       fibo1 += fibo2;
//       fibo2 += fibo1;
//       resultado += esPar(fibo1) + esPar(fibo2);
//     }
//   }
//   return resultado;
// }

// document.write("Valor ingresado = " + num + ". La suma de los valores pares de la sucesión de fibonacci que no lo exceden es: " +
//     fiboEvenSum(num)
// );

// Problem 4: Find the Symmetric Difference

// The mathematical term symmetric difference (△ or ⊕) of two sets is the set of elements which are in either of the two sets but not in both. For
// example, for sets A = {1, 2, 3} and B = {2, 3, 4}, A △ B = {1, 4}. Symmetric difference is a binary operation, which means it operates on
// only two elements. So to evaluate an expression involving symmetric differences among three elements (A △ B △ C), you must complete one
// operation at a time. Thus, for sets A and B above, and C = {2, 3}, A △ B △ C = (A △ B) △ C = {1, 4} △ {2, 3} = {1, 2, 3, 4}.

// Create a function called sym that takes two or more arrays and returns an array of their symmetric difference. The returned array must contain
// only unique values (no duplicates).

// sym([1, 2, 3], [5, 2, 1, 4]) should return [3, 4, 5].
// sym([1, 2, 3], [5, 2, 1, 4]) should contain only three elements.
// sym([1, 2, 3, 3], [5, 2, 1, 4]) should return [3, 4, 5].

// sym([1, 2, 3, 3], [5, 2, 1, 4]) should contain only three elements.
// sym([1, 2, 3], [5, 2, 1, 4, 5]) should return [3, 4, 5].
// sym([1, 2, 3], [5, 2, 1, 4, 5]) should contain only three elements.
// sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should return [1, 4, 5]
// sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should contain only three elements.
// sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should return [1, 4, 5].
// sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should contain only three elements.
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should return [2, 3, 4, 6, 7].
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should contain only five elements.
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should return [1, 2, 4, 5, 6, 7, 8, 9].
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should contain only eight elements.

//Solución:

// funcion va a recibir x arreglos, lo que se es que evaluarlos de a 2

// el array no debria tener valores repetido, hay que borrarselos
// deberia saber cuantos array llegan y contarlos
// se deben trabajar de 2
// no se la cantidad de elementos del array pero se que no seran vacios
// debe haber una funcion que recorra el array y evalue con el onstoragedebe crearse el "nuevo" array para comparar con el que siga




let array1 = [1, 2, 3];
let array2 = [5, 2, 1, 4];

let arrayFinal = [];

console.log("array1", array1);
console.log("array2", array2);


function difSim(array1, array2) {
  let arrayResultante = [];
  arrayConcat = array1.concat(array2);
  console.log("arrayConcat: ", arrayConcat);

  for (i = 0; i < arrayConcat.length; i++) {
    flag = true;

    for (j = 0; j < arrayConcat.length; j++) {
      if ((i !== j) && (arrayConcat[i] === arrayConcat[j])) {
        flag = false;
      }
    }
    if (flag) {
      arrayResultante.push(arrayConcat[i]);
    }
  }
return arrayResultante;
}

arrayFinal = difSim(array1,array2);
console.log("arrayFinal", arrayFinal);

