// Problem 1: Sum square difference

// The sum of the squares of the first ten natural numbers is, 1 2 + 2 2 + ... + 10 2 = 385
// The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10) 2  = 55 2  = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.
// Find the difference between the sum of the squares of the first n natural numbers and the square of the sum.
// sumSquareDifference(10) should return a number.
// sumSquareDifference(10) should return 2640.
// sumSquareDifference(20) should return 41230.
// sumSquareDifference(100) should return 25164150.

//Solución:

// function sumSquareDifference(numero) {
//   let sumaCuadrados = 0;
//   let cuadradoSuma = 0;
//   let suma = 0;

//   for (let i = 0; i <= numero; i++) {
//     sumaCuadrados += i * i;
//     suma += i;
//   }
//   cuadradoSuma = suma * suma;
//   return cuadradoSuma - sumaCuadrados;
// }

// document.write("Problem 1: Sum square difference" + "<br><br>");
// let numero = prompt("Ingrese un número natural: ", "");
// document.write(
//   "La diferencia entre el cuadrado de la suma y la suma de sus cuadrados de los primeros " +
//     numero +
//     " nùmeros naturales es: " +
//     sumSquareDifference(numero)
// );

// //************ COMPROBACIONES ************//
// document.write("<br><br>" + "Comprobaciones: ", "<br>");
// document.write(
//   "sumSquareDifference(10) should return 2640: ",
//   sumSquareDifference(10),
//   "<br>"
// );
// document.write(
//   "sumSquareDifference(20) should return 41230: ",
//   sumSquareDifference(20),
//   "<br>"
// );
// document.write(
//   "sumSquareDifference(100) should return 25164150: ",
//   sumSquareDifference(100),
//   "<br>"
// );

//***************************************************************************************************************************************

// Problem 2: Multiples of 3 and 5

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below the provided parameter value number.
// multiplesOf3and5(10) should return a number.
// multiplesOf3and5(49) should return 543.
// multiplesOf3and5(1000) should return 233168.
// multiplesOf3and5(8456) should return 16687353.
// multiplesOf3and5(19564) should return 89301183.

//Solución:

// function multiplesOf3and5(numero) {
//   let sumaMultiplos = 0;
//   for (i = 0; i < numero; i++) {
//     if (i % 3 === 0 || i % 5 === 0) {
//       sumaMultiplos += i;
//     }
//   }
//   return sumaMultiplos;
// }

// document.write("Problem 2: Multiples of 3 and 5" + "<br><br>");
// let numero = prompt("Ingrese un número natural: ", "");

// document.write(
//   "La suma de todos los números naturales múltiplos de 3 o 5, menores que " +
//     numero +
//     " es: " +
//     multiplesOf3and5(numero)
// );

//************ COMPROBACIONES ************//
// document.write("<br><br>" + "Comprobaciones: ", "<br>");
// document.write(
//   "multiplesOf3and5(10) should return 23: ",
//   multiplesOf3and5(10),
//   "<br>"
// );
// document.write(
//   "multiplesOf3and5(49) should return 543: ",
//   multiplesOf3and5(49),
//   "<br>"
// );
// document.write(
//   "multiplesOf3and5(1000) should return 233168: ",
//   multiplesOf3and5(1000),
//   "<br>"
// );
// document.write(
//   "multiplesOf3and5(8456) should return 16687353: ",
//   multiplesOf3and5(8456),
//   "<br>"
// );
// document.write(
//   "multiplesOf3and5(19564) should return 89301183: ",
//   multiplesOf3and5(19564),
//   "<br>"
// );

//***************************************************************************************************************************************

// Problem 3: Even Fibonacci Numbers

// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not exceed n, find the sum of the even-valued terms.
// fiboEvenSum(10) should return a number.
// Your function should return an even value.
// Your function should sum the even-valued Fibonacci
// numbers: fiboEvenSum(8) should return 10.
// fiboEvenSum(10) should return 10.
// fiboEvenSum(34) should return 44.
// fiboEvenSum(60) should return 44.
// fiboEvenSum(1000) should return 798.
// fiboEvenSum(100000) should return 60696.
// fiboEvenSum(4000000) should return 4613732.

//Solución:
// La sucesión se encuentra inicializada según lo indicado en el enunciado.
// En caso de necesitar inicializarla en 0 (0, 1, 1, 2, 3, 5, ... ), modificar las variables de la función fiboEvenSum(num): let a = 0; let c = 1

// function fiboEvenSum(num) {
//   let a = 1;
//   let b = 1;
//   let c = 2;
//   let suma_pares = 0;

//   while (a <= num) {
//     if (a % 2 === 0) {
//       suma_pares += a;
//     }
//     c = a + b;
//     b = a;
//     a = c;
//   }
//   return suma_pares;
// }

// document.write("Problem 3: Even Fibonacci Numbers" + "<br><br>");
// let num = prompt("Ingrese un número natural: ", "");

// document.write(
//   "La suma de los valores pares de la sucesión de fibonacci que no exceden el valor " +
//     num +
//     " es: " +
//     fiboEvenSum(num)
// );

// //************ COMPROBACIONES ************//
// document.write("<br><br>" + "Comprobaciones: ", "<br>");
// document.write("fiboEvenSum(8) should return 10: ", fiboEvenSum(8), "<br>");

// document.write("fiboEvenSum(10) should return 10: ", fiboEvenSum(10), "<br>");

// document.write("fiboEvenSum(20) should return 10: ", fiboEvenSum(20), "<br>");

// document.write("fiboEvenSum(34) should return 44: ", fiboEvenSum(34), "<br>");

// document.write("fiboEvenSum(60) should return 44: ", fiboEvenSum(60), "<br>");

// document.write(
//   "fiboEvenSum(1000) should return 798: ",
//   fiboEvenSum(1000),
//   "<br>"
// );

// document.write(
//   "fiboEvenSum(100000) should return 60696: ",
//   fiboEvenSum(100000),
//   "<br>"
// );

// document.write(
//   "fiboEvenSum(4000000) should return 4613732: ",
//   fiboEvenSum(4000000),
//   "<br>"
// );

//***************************************************************************************************************************************

// Problem 4: Find the Symmetric Difference

// The mathematical term symmetric difference (△ or ⊕) of two sets is the set of elements which are in either of the two sets but not in both. For
// example, for sets A = {1, 2, 3} and B = {2, 3, 4}, A △ B = {1, 4}. Symmetric difference is a binary operation, which means it operates on
// only two elements. So to evaluate an expression involving symmetric differences among three elements (A △ B △ C), you must complete one
// operation at a time. Thus, for sets A and B above, and C = {2, 3}, A △ B △ C = (A △ B) △ C = {1, 4} △ {2, 3} = {1, 2, 3, 4}.
// Create a function called sym that takes two or more arrays and returns an array of their symmetric difference. The returned array must contain
// only unique values (no duplicates).
// sym([1, 2, 3], [5, 2, 1, 4]) should return [3, 4, 5].
// sym([1, 2, 3], [5, 2, 1, 4]) should contain only three elements.
// sym([1, 2, 3, 3], [5, 2, 1, 4]) should return [3, 4, 5].
// sym([1, 2, 3, 3], [5, 2, 1, 4]) should contain only three elements.
// sym([1, 2, 3], [5, 2, 1, 4, 5]) should return [3, 4, 5].
// sym([1, 2, 3], [5, 2, 1, 4, 5]) should contain only three elements.
// sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should return [1, 4, 5]
// sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should contain only three elements.
// sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should return [1, 4, 5].
// sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should contain only three elements.
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should return [2, 3, 4, 6, 7].
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should contain only five elements.
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should return [1, 2, 4, 5, 6, 7, 8, 9].
// sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should contain only eight elements.

//Solución:

// function comparar(array_a, array_b) {
//   let arrayComparado = [];

//   for (let i = 0; i < array_a.length; i++) {
//     flag = true;
//     for (let j = 0; j < array_b.length; j++) {
//       if (array_a[i] === array_b[j]) {
//         flag = false;
//       }
//     }
//     if (flag) {
//       arrayComparado.push(array_a[i]);
//     }
//   }
//   return arrayComparado;
// }

// function quitarElementosDuplicados(array) {
//   let arrayElementosUnicos = [];

//   for (let i = 0; i < array.length; i++) {
//     flag = true;
//     for (let j = i; j < array.length; j++) {
//       if (i !== j && array[i] === array[j]) {
//         flag = false;
//       }
//     }
//     if (flag) {
//       arrayElementosUnicos.push(array[i]);
//     }
//   }
//   return arrayElementosUnicos;
// }

// function diferenciaSimetrica(array_1, array_2) {
//   let arrayComparado_1_con_2 = [];
//   let arrayComparado_2_con_1 = [];
//   let arrayResultanteOrdenado = [];

//   //Primero se eliminan los elementos duplicados en cada arreglo por separado
//   //Luego se obtienen los elementos únicos del primer arreglo (al compararlo con el segundo) y los elementos únicos del segundo arreglo (al compararlo con el primero).
//   //Finalmente los arreglos generados se concatenan y ordenan de menor a mayor

//   array_1 = quitarElementosDuplicados(array_1);
//   array_2 = quitarElementosDuplicados(array_2);

//   arrayComparado_1_con_2 = comparar(array_1, array_2);
//   arrayComparado_2_con_1 = comparar(array_2, array_1);

//   arrayResultanteOrdenado = arrayComparado_1_con_2.concat(arrayComparado_2_con_1).sort();

//   return arrayResultanteOrdenado;
// }

// function sym() {
//   let arrayResultante = arguments[0];

//   for (let i = 1; i < arguments.length; i++) {
//     arrayResultante = diferenciaSimetrica(arrayResultante, arguments[i]);
//   }
//   return arrayResultante;
// }

// //************ COMPROBACIONES ************//
// console.log("Problem 4: Find the Symmetric Difference");

// let arrayResultado = [];
// console.log("Comprobaciones: ");

// arrayResultado = sym([1, 2, 3], [2, 3, 4]);
// console.log("sym([1, 2, 3], [2, 3, 4]) should return [1, 4]: ", arrayResultado);

// arrayResultado = sym([1, 2, 3], [2, 3, 4], [2, 3]);
// console.log(
//   "sym([1, 2, 3], [2, 3, 4], [2, 3]) should return [1, 2, 3, 4]: ",
//   arrayResultado
// );

// arrayResultado = sym([1, 2, 3], [5, 2, 1, 4]);
// console.log(
//   "sym([1, 2, 3], [5, 2, 1, 4]) should return [3, 4, 5]: ",
//   arrayResultado
// );

// arrayResultado = sym([1, 2, 3, 3], [5, 2, 1, 4]);
// console.log(
//   "sym([1, 2, 3, 3], [5, 2, 1, 4]) should return [3, 4, 5]: ",
//   arrayResultado
// );

// arrayResultado = sym([1, 2, 3], [5, 2, 1, 4, 5]);
// console.log(
//   "sym([1, 2, 3], [5, 2, 1, 4, 5]) should return [3, 4, 5]: ",
//   arrayResultado
// );

// arrayResultado = sym([1, 2, 5], [2, 3, 5], [3, 4, 5]);
// console.log(
//   "sym([1, 2, 5], [2, 3, 5], [3, 4, 5]) should return [1, 4, 5]: ",
//   arrayResultado
// );

// arrayResultado = sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]);
// console.log(
//   "sym([1, 1, 2, 5], [2, 2, 3, 5], [3, 4, 5, 5]) should return [1, 4, 5].: ",
//   arrayResultado
// );

// arrayResultado = sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]);
// console.log(
//   "sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3]) should return [2, 3, 4, 6, 7].: ",
//   arrayResultado
// );

// arrayResultado = sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]);
// console.log(
//   "sym([3, 3, 3, 2, 5], [2, 1, 5, 7], [3, 4, 6, 6], [1, 2, 3], [5, 3, 9, 8], [1]) should return [1, 2, 4, 5, 6, 7, 8, 9].: ",
//   arrayResultado
// );

//***************************************************************************************************************************************

// Problem 3: Largest prime factor
// The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

// let numero = 600851475143;
// let array = []

// for(i=0; i<=numero; i++){
//     if(numero%i===0){
//         numero = numero/i;
//         array.push(i);
//     }
// }
// document.write("What is the largest prime factor of the number 600851475143 ?: " + array[array.length-1]);

//***************************************************************************************************************************************
// Problem 4: Largest palindrome product
// A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

// Find the largest palindrome made from the product of two 3-digit numbers.

// function palindromo(number) {
//   let res = 0;
//   let temp = 0;
//   let final = 0;

//   temp = number;

//   while (number > 0) {
//     res = number % 10;
//     number = parseInt(number / 10);
//     final = final * 10 + res;
//   }

//   return final === temp;
// }

// let mayorPalindromo = 0;

// for (let i = 999; i >= 100; i--) {
//   for (let j = i; j >= 100; j--) {
//     if (palindromo(i * j) && i * j > mayorPalindromo) {
//       mayorPalindromo = i * j;
//     }
//   }
// }

// console.log(mayorPalindromo);

//***************************************************************************************************************************************
// Problem 5 Smallest multiple
// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

// let resultado = 0;
// let contador = 0;
// let temp = 0;

// while (resultado === 0) {
//   temp++;
//   contador = 0;
//   for (j = 20; j > 0; j--) {
//     if (temp % j == 0) {
//       contador++;
//     } else {
//       j = 0;
//     }
//     if (contador === 20) {
//       resultado = temp;
//     }
//   }
// }
// console.log(resultado);

//***************************************************************************************************************************************
// Problem 6: Sum square difference
// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

// function sumSquareDifference(numero) {
//   let sumaCuadrados = 0;
//   let cuadradoSuma = 0;
//   let suma = 0;

//   for (let i = 0; i <= numero; i++) {
//     sumaCuadrados += i * i;
//     suma += i;
//   }
//   cuadradoSuma = suma * suma;
//   return cuadradoSuma - sumaCuadrados;
// }

// console.log(sumSquareDifference(100));

//***************************************************************************************************************************************

// Problem 7: 10001st prime
// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

// What is the 10 001st prime number?

// function primo(numero) {
//   for (let i = 2; i < numero; i++) {
//     if (numero % i === 0) {
//       return false;
//     }
//   }
//   return numero;
// }

// var j = 2;
// var numerosPrimos = [];

// while (numerosPrimos.length !== 10001) {
//   if (primo(j)) {
//     numerosPrimos.push(j);
//   }
//   j++;
// }

// console.log("posición: ", numerosPrimos.length);
// console.log("numero: ", numerosPrimos.pop());


//***************************************************************************************************************************************
// Problem 8: Largest product in a series

// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

// 73167176531330624919225119674426574742355349194934
// 96983520312774506326239578318016984801869478851843
// 85861560789112949495459501737958331952853208805511
// 12540698747158523863050715693290963295227443043557
// 66896648950445244523161731856403098711121722383113
// 62229893423380308135336276614282806444486645238749
// 30358907296290491560440772390713810515859307960866
// 70172427121883998797908792274921901699720888093776
// 65727333001053367881220235421809751254540594752243
// 52584907711670556013604839586446706324415722155397
// 53697817977846174064955149290862569321978468622482
// 83972241375657056057490261407972968652414535100474
// 82166370484403199890008895243450658541227588666881
// 16427171479924442928230863465674813919123162824586
// 17866458359124566529476545682848912883142607690042
// 24219022671055626321111109370544217506941658960408
// 07198403850962455444362981230987879927244284909188
// 84580156166097919133875499200524063689912560717606
// 05886116467109405077541002256983155200055935729725
// 71636269561882670428252483600823257530420752963450

// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?